//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace naturvida20210817.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class naturvidaclaseEntities : DbContext
    {
        public naturvidaclaseEntities()
            : base("name=naturvidaclaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<factura> factura { get; set; }
        public virtual DbSet<Factura_Detalle> Factura_Detalle { get; set; }
        public virtual DbSet<productos> productos { get; set; }
        public virtual DbSet<vendedores> vendedores { get; set; }
    
        public virtual int sp_Addcliente(string documento, string nombre, string direccion, string telefono, string correo)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Addcliente", documentoParameter, nombreParameter, direccionParameter, telefonoParameter, correoParameter);
        }
    
        public virtual int sp_remCliente(string documento)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_remCliente", documentoParameter);
        }
    
        public virtual int sp_updCliente(string documento, string nombre, string direccion, string telefono, string correo)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updCliente", documentoParameter, nombreParameter, direccionParameter, telefonoParameter, correoParameter);
        }
    
        public virtual int sp_AddProducto(string codigo, string descripcion, Nullable<decimal> valor_unidad, Nullable<int> cantidad)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var valor_unidadParameter = valor_unidad.HasValue ?
                new ObjectParameter("valor_unidad", valor_unidad) :
                new ObjectParameter("valor_unidad", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddProducto", codigoParameter, descripcionParameter, valor_unidadParameter, cantidadParameter);
        }
    
        public virtual int sp_AddVendedor(string documento, string usuario, string contraseña, string nombre)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddVendedor", documentoParameter, usuarioParameter, contraseñaParameter, nombreParameter);
        }
    
        public virtual int sp_RemProducto(string codigo)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemProducto", codigoParameter);
        }
    
        public virtual int sp_RemVendedor(string documento)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemVendedor", documentoParameter);
        }
    
        public virtual int sp_updProducto(string codigo, string descripcion, Nullable<decimal> valor_unidad, Nullable<int> cantidad)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var valor_unidadParameter = valor_unidad.HasValue ?
                new ObjectParameter("valor_unidad", valor_unidad) :
                new ObjectParameter("valor_unidad", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updProducto", codigoParameter, descripcionParameter, valor_unidadParameter, cantidadParameter);
        }
    
        public virtual int sp_updVendedor(string documento, string usuario, string contraseña, string nombre)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updVendedor", documentoParameter, usuarioParameter, contraseñaParameter, nombreParameter);
        }
    
        public virtual int AddFactura(Nullable<int> numero, Nullable<System.DateTime> fecha, string cliente, string vendedor)
        {
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var vendedorParameter = vendedor != null ?
                new ObjectParameter("vendedor", vendedor) :
                new ObjectParameter("vendedor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFactura", numeroParameter, fechaParameter, clienteParameter, vendedorParameter);
        }
    
        public virtual int AddFacturaDetalle(Nullable<int> factura, string producto, Nullable<int> cantidad, Nullable<decimal> valorUnidad)
        {
            var facturaParameter = factura.HasValue ?
                new ObjectParameter("factura", factura) :
                new ObjectParameter("factura", typeof(int));
    
            var productoParameter = producto != null ?
                new ObjectParameter("producto", producto) :
                new ObjectParameter("producto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var valorUnidadParameter = valorUnidad.HasValue ?
                new ObjectParameter("valorUnidad", valorUnidad) :
                new ObjectParameter("valorUnidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFacturaDetalle", facturaParameter, productoParameter, cantidadParameter, valorUnidadParameter);
        }
    
        public virtual int addAdmin(string nombre, string maquina)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var maquinaParameter = maquina != null ?
                new ObjectParameter("maquina", maquina) :
                new ObjectParameter("maquina", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addAdmin", nombreParameter, maquinaParameter);
        }
    
        public virtual int agregarLicencia(string licencia)
        {
            var licenciaParameter = licencia != null ?
                new ObjectParameter("licencia", licencia) :
                new ObjectParameter("licencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarLicencia", licenciaParameter);
        }
    
        public virtual int sp_addMaquinaProp(string maquina, string propietario)
        {
            var maquinaParameter = maquina != null ?
                new ObjectParameter("maquina", maquina) :
                new ObjectParameter("maquina", typeof(string));
    
            var propietarioParameter = propietario != null ?
                new ObjectParameter("propietario", propietario) :
                new ObjectParameter("propietario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addMaquinaProp", maquinaParameter, propietarioParameter);
        }
    
        public virtual int sp_addPropietario(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addPropietario", emailParameter);
        }
    
        public virtual int updLicencia(string licencia, string email)
        {
            var licenciaParameter = licencia != null ?
                new ObjectParameter("licencia", licencia) :
                new ObjectParameter("licencia", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updLicencia", licenciaParameter, emailParameter);
        }
    }
}
